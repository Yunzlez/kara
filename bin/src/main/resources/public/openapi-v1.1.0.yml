openapi: "3.0.0"
info:
  version: 1.1.0
  title: KARA
  license:
    name: MIT
    #todo host MIT license somewhere
servers:
  - url: https://kara.rest/api/v1.1.0
tags:
  - name: Bin Management
    description: Crud & Settings for bins
  - name: Events
    description: Crud for events, and customizing fields included in response
paths:
  /bins:
    get:
      tags:
        - Bin Management
      summary: List all available bins
      parameters:
        - name: page
          in: query
          description: The page to retrieve
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: How many items to return at one time (max 1000)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: A paged array of bins
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/binList"
    post:
      tags:
        - Bin Management
      summary: Create a bin
      responses:
        303:
          description: The bin was created and can be found at the URL specified
          headers:
            location:
              description: link to the new bin
              schema:
                type: string
  /bins/{binId}:
    get:
      tags:
        - Bin Management
      summary: Retrieves the settings for a bin
      parameters:
        - name: binId
          in: path
          description: The name of the bin
          required: true
          schema:
            type: string
      responses:
        200:
          description: The current settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/settings"
    put:
      tags:
        - Bin Management
      summary: Updates the settings for the bin
      parameters:
        - name: binId
          in: path
          description: The name of the bin
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/binSettings'
      responses:
        200:
          description: The current settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/settings"
    delete:
      tags:
        - Bin Management
      summary: Deletes an (empty) bin
      parameters:
        - name: binId
          in: path
          description: The name of the bin
          required: true
          schema:
            type: string
      responses:
        204:
          description: The bin has been deleted successfully
        400:
          description: The bin was not empty and could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /bins/{binId}/events:
    get:
      tags:
        - Events
      summary: Retrieves the events for a bin
      parameters:
        - $ref: '#/components/parameters/binId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: fields
          in: query
          description: the fields of the requests to retrieve, comma separated. Returns all if not given. One or more of [method,requesttime,body,headers,protocol,queryparams]
          required: false
          schema:
            type: string
      responses:
        200:
          description: Sucessfully retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/eventList"
    delete:
      tags:
        - Events
      summary: Clears all events from the bin
      parameters:
        - $ref: '#/components/parameters/binId'
      responses:
        303:
          description: The bin was cleared and can be found at the URL specified
          headers:
            location:
              description: link to the bin
              schema:
                type: string
  /bins/{binId}/events/{eventId}:
    get:
      tags:
        - Events
      summary: retrieves a specific event
      parameters:
        - $ref: '#/components/parameters/binId'
        - $ref: '#/components/parameters/eventId'
      responses:
        200:
          description: Retrieval successful
        404:
          description: No such event/bin could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
        - Events
      summary: deletes a specific event
      parameters:
        - $ref: '#/components/parameters/binId'
        - $ref: '#/components/parameters/eventId'
      responses:
        204:
          description: event deleted successfully
components:
  parameters:
    binId:
      name: binId
      in: path
      description: The name of the bin
      required: true
      schema:
        type: string
    eventId:
      name: eventId
      in: path
      description: the id of the event
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: The page to retrieve
      required: false
      schema:
        type: integer
        format: int32
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 1000)
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    bin:
      required:
        - binName
        - requestCounts
        - inbound
        - page
        - limit
        - totalPages
        - totalBodySize
        - events
      properties:
        binName:
          type: string
        requestCounts:
          type: object
          $ref: "#/components/schemas/metric"
        inbound:
          type: object
          $ref: "#/components/schemas/inbound"
        page:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        totalBodySize:
          type: string
        events:
          type: array
          items:
            $ref: "#/components/schemas/event"
        settings:
          type: object
          $ref: "#/components/schemas/settings"
    binSettings:
      type: object
      properties:
        name:
          type: string
        response:
          type: object
          $ref: '#/components/schemas/customResponse'
        webhook:
          type: object
          $ref: '#/components/schemas/webhookSettings'
    binListEntry:
      required:
        - binName
        - requestCounts
      properties:
        binName:
          type: string
        requestCounts:
          $ref: "#/components/schemas/metric"
    pageMeta:
      type: object
      properties:
        page:
          type: number
        totalItems:
          type: number
        totalPages:
          type: number
        nextPage:
          type: string
        previousPage:
          type: string
    metric:
      required:
        - total
        - counts
      properties:
        total:
          type: integer
          format: int32
        counts:
          $ref: "#/components/schemas/count"
    count:
      properties:
        GET:
          type: integer
          format: int32
        POST:
          type: integer
          format: int32
        DELETE:
          type: integer
          format: int32
        PUT:
          type: integer
          format: int32
        PATCH:
          type: integer
          format: int32
        MQTT:
          type: integer
          format: int32
    binList:
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/pageMeta"
        items:
          type: array
          items:
            $ref: "#/components/schemas/binListEntry"
    event:
      properties:
        id:
          type: string
        method:
          type: string
        source:
          type: string
          description: Source of the event (MQTT/HTTP/...)
        location:
          type: string
          description: Location specifier; Path for HTTP, topic for MQTT
        metadata:
          type: object
          description: Key/value of the events' metadata - headers for HTTP/MQTT
        additionalData:
          type: object
          description: Additional key/value data, such as query params in HTTP
        contentType:
          type: string
          description: Type of data the body contains
        eventTime:
          type: string
        origin:
          type: string
          description: originator of the request, such as the source IP for HTTP or the MQTT clientId
        bodySize:
          type: number
          format: int64
          description: The size of the body in bytes
        protocolVersion:
          type: string
          description: Version string of the protocol that this event originates from
        body:
          type: string
    eventList:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/pageMeta'
        items:
          $ref: '#/components/schemas/event'
    inbound:
      required:
        - httpUrl
        - mqttUrl
        - mqttTopic
      properties:
        httpUrl:
          type: string
        mqttUrl:
          type: string
        mqttTopic:
          type: string
    settings:
      required:
        - code
        - mimeType
        - body
        - headers
        - cookies
        - customName
        - permanent
      properties:
        response:
          type: object
          $ref: '#/components/schemas/customResponse'
        webhook:
          type: object
          $ref: '#/components/schemas/webhookSettings'
        name:
          type: string
          description: The name for the bin. Note that this affects the request URI, and the original request URI is invalid
        isPermanent:
          type: boolean
          description: Whether the bin is permanent(Never deleted, but reduced capacity)
    customResponse:
      properties:
        code:
          type: integer
          format: int32
          description: The HTTP code to return when a request is sent
        contentType:
          type: string
        body:
          type: string
        headers:
          type: object
          description: Key/value representation of the headers
        responseType:
          type: string
          enum:
            - "TEXT"
            - "BINARY"
          description: What to consider the body as - if set to BINARY, the body is expected to be Base64 encoded
        responseOrigin:
          type: string
          enum:
            - "DEFAULT"
            - "CUSTOM"
            - "WEBHOOK"
          description: Where to get the response content. DEFAULT if not given, which will just return the json representation of the request. CUSTOM will return the response as it was set up. WEBHOOK will return the response of the webhook that is set up for this bin (if available)
    webhookSettings:
      type: object
      properties:
        destination:
          type: string
          description: The destination URL
        method:
          type: string
          enum:
            - "GET"
            - "POST"
            - "PUT"
            - "DELETE"
        body:
          type: string
          description: "the body to POST/PUT"
        bodyType:
          type: string
          enum:
            - "TEXT"
            - "BINARY"
          description: What to consider the body as - if set to BINARY, the body is expected to be Base64 encoded
        mode:
          type: string
          enum:
            - "PROXY"
            - "INFO"
            - "CUSTOM"
          description: The mode in which to use the webhook. PROXY acts as a proxy, passing on the incoming request. INFO forwards the incoming events' information (only POST/PUT). CUSTOM sends the custom response set up
        auth:
          type: object
          properties:
            type:
              type: string
              enum:
                - "BASIC"
                - "TOKEN"
                - "OAUTH"
            username:
              type: string
            password:
              type: string
            token:
              type: string
            clientId:
              type: string
            secret:
              type: string
            grantType:
              type: string
              enum:
                - "PASSWORD"
                - "IMPLICIT"
                - "CLIENT_CREDENTIALS"
    error:
      properties:
        code:
          type: number
          description: The HTTP error code
        message:
          type: string